#[derive(Debug)]
pub enum HttpStatus {
    Continue,
    SwitchingProtocols,
    Ok,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    UseProxy,
    TemporaryRedirect,
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    RequestEntityTooLarge,
    RequestURITooLarge,
    UnsupportedMediaType,
    RequestedRangeNotSatisfiable,
    ExepectationFailed,
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HttpVersionNotSupported,
}

impl HttpStatus {
  pub fn from_usize(x: usize) -> Self {
      use self::HttpStatus::*;

      match x {
          100 => Continue,
          101 => SwitchingProtocols,
          200 => Ok,
          201 => Created,
          202 => Accepted,
          203 => NonAuthoritativeInformation,
          204 => NoContent,
          205 => ResetContent,
          206 => PartialContent,
          300 => MultipleChoices,
          301 => MovedPermanently,
          302 => Found,
          303 => SeeOther,
          304 => NotModified,
          305 => UseProxy,
          307 => TemporaryRedirect,
          400 => BadRequest,
          401 => Unauthorized,
          402 => PaymentRequired,
          403 => Forbidden,
          404 => NotFound,
          405 => MethodNotAllowed,
          406 => NotAcceptable,
          407 => ProxyAuthenticationRequired,
          408 => RequestTimeout,
          409 => Conflict,
          410 => Gone,
          411 => LengthRequired,
          412 => PreconditionFailed,
          413 => RequestEntityTooLarge,
          414 => RequestURITooLarge,
          415 => UnsupportedMediaType,
          416 => RequestedRangeNotSatisfiable,
          417 => ExepectationFailed,
          500 => InternalServerError,
          501 => NotImplemented,
          502 => BadGateway,
          503 => ServiceUnavailable,
          504 => GatewayTimeout,
          505 => HttpVersionNotSupported,
          _ => InternalServerError,
      }
  }

  pub fn to_string(&self) -> String {
      use self::HttpStatus::*;

      match self {
          &Continue => "100 Continue",
          &SwitchingProtocols => "101 Switching Protocols",
          &Ok => "200 Ok",
          &Created => "201 Created",
          &Accepted => "202 Accepted",
          &NonAuthoritativeInformation => "203 Non-Authoritative Information",
          &NoContent => "204 No Content",
          &ResetContent => "205 Reset Content",
          &PartialContent => "206 Partial Content",
          &MultipleChoices => "300 Multiple Choices",
          &MovedPermanently => "301 Moved Permanently",
          &Found => "302 Found",
          &SeeOther => "303 See Other",
          &NotModified => "304 Not Modified",
          &UseProxy => "305 Use Proxy",
          &TemporaryRedirect => "307 Temporary Redirect",
          &BadRequest => "400 Bad Request",
          &Unauthorized => "401 Unauthorized",
          &PaymentRequired => "402 Payment Required",
          &Forbidden => "403 Forbidden",
          &NotFound => "404 Not Found",
          &MethodNotAllowed => "405 Method Not Allowed",
          &NotAcceptable => "406 Not Acceptable",
          &ProxyAuthenticationRequired => "407 Proxy Authentication Required",
          &RequestTimeout => "408 Request Timeout",
          &Conflict => "409 Conflict",
          &Gone => "410 Gone",
          &LengthRequired => "411 Length Required",
          &PreconditionFailed => "412 Precondition Failed",
          &RequestEntityTooLarge => "413 Request Entity Too Large",
          &RequestURITooLarge => "414 Request-URI Too Large",
          &UnsupportedMediaType => "415 Unsupported Media Type",
          &RequestedRangeNotSatisfiable => "416 Requested Range Not Satisfiable",
          &ExepectationFailed => "417 Exepectation Failed",
          &InternalServerError => "500 InternalServerError",
          &NotImplemented => "501 Not Implemented",
          &BadGateway => "502 Bad Gateway",
          &ServiceUnavailable => "503 Service Unavailable",
          &GatewayTimeout => "504 Gateway Timeout",
          &HttpVersionNotSupported => "505 Http Version Not Supported",
      }.to_string()
  }
}
